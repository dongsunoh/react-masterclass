<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="fc427109-75a3-407e-b2bb-ffa48aa4b658" name="Changes" comment="Typescript (Optional Props &amp; default 값 보내기)&#10; - interface 선언부에 ?를 사용 하면 (borderColor? : string) Optional Props가 됨.&#10; - ?? 두개를 사용하면 default 값을 사용하겠다는 의미 (borderColor={borderColor ?? bgColor})">
      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/Circle.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/Circle.tsx" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ChangesViewManager">
    <option name="groupingKeys">
      <option value="directory" />
      <option value="module" />
      <option value="repository" />
    </option>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="TypeScript File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;dongsunoh&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/dongsunoh/react-masterclass&quot;,
    &quot;accountId&quot;: &quot;f5a91d83-dd34-490f-8268-89dcb1087dcc&quot;
  }
}</component>
  <component name="KubernetesApiPersistence">{}</component>
  <component name="KubernetesApiProvider">{
  &quot;isMigrated&quot;: true
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="ProjectErrors" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 5
}</component>
  <component name="ProjectId" id="30XRWvvIB5pTQE7wwXkzLXriCU8" />
  <component name="ProjectViewState">
    <option name="autoscrollFromSource" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ModuleVcsDetector.initialDetectionPerformed&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;npm.start.executor&quot;: &quot;Run&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.rainbow.brackets.lite&quot;,
    &quot;ts.external.directory.path&quot;: &quot;C:\\dev\\intellij_workspace\\react-masterclass\\node_modules\\typescript\\lib&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RunManager">
    <configuration name="npm start" type="js.build_tools.npm">
      <package-json value="$PROJECT_DIR$/package.json" />
      <command value="run" />
      <scripts>
        <script value="start" />
      </scripts>
      <node-interpreter value="project" />
      <envs />
      <method v="2" />
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-fbdcb00ec9e3-intellij.indexing.shared.core-IU-251.27812.49" />
        <option value="bundled-js-predefined-d6986cc7102b-09060db00ec0-JavaScript-IU-251.27812.49" />
      </set>
    </attachedChunks>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="fc427109-75a3-407e-b2bb-ffa48aa4b658" name="Changes" comment="" />
      <created>1753771967258</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1753771967258</updated>
      <workItem from="1753771968694" duration="13084000" />
      <workItem from="1753791975688" duration="654000" />
      <workItem from="1753836484957" duration="545000" />
    </task>
    <task id="LOCAL-00001" summary="Typescript를 사용할 수 있는 react app 프로젝트 생성">
      <option name="closed" value="true" />
      <created>1753772646612</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1753772646612</updated>
    </task>
    <task id="LOCAL-00002" summary="Typescript를 사용할 수 있는 react app 프로젝트 생성하여 직전 소스 코드 정상적으로 작동되도록 수정&#10; - props:any 방식은 타입 안전성이 사라지기 때문에 비추천 함.">
      <option name="closed" value="true" />
      <created>1753781219553</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1753781219553</updated>
    </task>
    <task id="LOCAL-00003" summary="Typescript (Typing the Props)&#10; - Component의 props에 type을 전달하는 방법 &#10;   &gt; Typescript interface 선언을 통해 어떤 타입인지 정의.&#10;   &gt; 해당 변수가 어떤 타입인지 선언해서 사용 함. function ({bgColor} : CircleProps) or styled.div&lt;ContainerProps&gt;로 사용.">
      <option name="closed" value="true" />
      <created>1753785012241</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1753785012241</updated>
    </task>
    <task id="LOCAL-00004" summary="Typescript (Optional Props &amp; default 값 보내기)&#10; - interface 선언부에 ?를 사용 하면 (borderColor? : string) Optional Props가 됨.&#10; - ?? 두개를 사용하면 default 값을 사용하겠다는 의미 (borderColor={borderColor ?? bgColor})">
      <option name="closed" value="true" />
      <created>1753786345282</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1753786345282</updated>
    </task>
    <option name="localTasksCounter" value="5" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Typescript를 사용할 수 있는 react app 프로젝트 생성" />
    <MESSAGE value="Typescript를 사용할 수 있는 react app 프로젝트 생성하여 직전 소스 코드 정상적으로 작동되도록 수정&#10; - props:any 방식은 타입 안전성이 사라지기 때문에 비추천 함." />
    <MESSAGE value="Typescript (Typing the Props)&#10; - Component의 props에 type을 전달하는 방법 &#10;   &gt; Typescript interface 선언을 통해 어떤 타입인지 정의.&#10;   &gt; 해당 변수가 어떤 타입인지 선언해서 사용 함. function ({bgColor} : CircleProps) or styled.div&lt;ContainerProps&gt;로 사용." />
    <MESSAGE value="Typescript (Optional Props &amp; default 값 보내기)&#10; - interface 선언부에 ?를 사용 하면 (borderColor? : string) Optional Props가 됨.&#10; - ?? 두개를 사용하면 default 값을 사용하겠다는 의미 (borderColor={borderColor ?? bgColor})" />
    <option name="LAST_COMMIT_MESSAGE" value="Typescript (Optional Props &amp; default 값 보내기)&#10; - interface 선언부에 ?를 사용 하면 (borderColor? : string) Optional Props가 됨.&#10; - ?? 두개를 사용하면 default 값을 사용하겠다는 의미 (borderColor={borderColor ?? bgColor})" />
  </component>
</project>